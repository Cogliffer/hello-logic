
我们在专业的逻辑学技术前提下进行接下来的工作
用python实现一个命题逻辑中的随机公式生成器
命题符号使用 A_1,A_2,...A_n,...，并限制可以使用的符号的数量
先用第一个命题符号A_1，并将用过的符号记录到一个集合中，如果生成的随机数在已经用过的符号中，则直接添加，如果不再，修改为用过的符号的下一个没用的符号 
封装为一个类，这是命题逻辑的公式生成器，一开始就定义这个类的命题符号和可以使用的逻辑符号
使用最大复杂性指定要生成的公式，每层递归降低一个或多个复杂度
使用命题逻辑公理系统，生成重言式

在python中定义公式类（使用二叉树数据结构），将标准的一元命题模态逻辑公式（只使用否定、蕴含和Box算子并且使用latex字符串）转为这样定义的公式
现在从头开始重写def parse_latex(latex_str):函数。思路是这样的，要逐层解析。如果开头是否定符号则解析为否定公式，如果开头是Box则解析为模态公式，如果都不是则是蕴含式，需要寻找到正确的蕴含符号出现的位置，要依次计数左括号和右括号出现的次数，当相等时，其后面的蕴含符号就是正确的蕴含符号。只重写这个函数
修改item为content，定义一个证据检验器，包括MP检验，必然化规则检验，和替换检验。justification声明为三个中的哪一个，如果是MP，则检验content是否是长度为2的list，并且这两个步骤是当前证明中当前步骤前面的步骤，并检验是否符合MP规则的使用。如果是或必然化规则，则检验content是否是一个数字，并且这个数字是当前证明中当前步骤前面的步骤，并检验是否符合必然化规则的使用。如果是替换，检验content是否是一个合法的替换类（当前要首先定义替换类，并实现替换在公式类formula和latex上的替换函数），然后检验替换的结果是否是当前步骤的公式






